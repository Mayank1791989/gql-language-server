/* @flow */
declare module 'vscode-languageserver-types' {
  declare export type DocumentUri = string;

  declare export interface IPosition {
    line: number;
    character: number;
  }

  declare export var Position: {
    create(line: number, character: number): IPosition,
    is(value: any): boolean,
  };

  declare export interface IRange {
    start: IPosition;
    end: IPosition;
  }

  declare export class Range {
    static create(start: IPosition, end: IPosition): IRange;
    static create(
      startLine: number,
      startCharacter: number,
      endLine: number,
      endCharacter: number,
    ): IRange;
    is(value: any): boolean;
  }

  declare export interface ILocation {
    uri: DocumentUri;
    range: IRange;
  }

  declare export var Location: {
    create(uri: string, range: IRange): ILocation,
    is(value: any): boolean,
  };

  declare export interface ILocationLink {
    originalSelectionRange?: IRange;
    targetUri: DocumentUri;
    targetRange: IRange;
    targetSelectionRange: IRange;
  }
  declare export var LocationLink: {
    create(
      targetUri: DocumentUri,
      targetRange: IRange,
      targetSelectionRange: IRange,
      originSelectionRange?: IRange,
    ): ILocationLink,
    is(value: mixed): boolean,
  };

  declare export interface IColor {
    +red: number;
    +green: number;
    +blue: number;
    +alpha: number;
  }
  declare export var Color: {
    create(red: number, green: number, blue: number, alpha: number): IColor,
    is(value: mixed): boolean,
  };

  declare export interface IColorInformation {
    range: IRange;
    color: IColor;
  }
  declare export var ColorInformation: {
    create(range: IRange, color: IColor): IColorInformation,
    is(value: mixed): boolean,
  };

  declare export interface IColorPresentation {
    label: string;
    textEdit?: ITextEdit;
    additionalTextEdits?: ITextEdit[];
  }
  declare export var ColorPresentation: {
    create(
      label: string,
      textEdti?: ITextEdit,
      additionalTextEdits?: ITextEdit[],
    ): IColorPresentation,
    is(value: mixed): boolean,
  };

  declare export var FoldingRangeKind: {
    Comment: 'comment',
    Imports: 'imports',
    Region: 'region',
  };
  declare export type FoldingRangeKindType = 'comment' | 'imports' | 'region';

  declare export interface IFoldingRange {
    startLine: number;
    startCharacter?: number;
    endLine: number;
    endCharacter?: number;
    kind?: string;
  }
  declare export var FoldingRange: {
    create(
      startLine: number,
      endLine: number,
      startCharacter?: number,
      endCharacter?: number,
    ): IFoldingRange,
  };

  declare export interface IDiagnosticRelatedInformation {
    location: ILocation;
    message: string;
  }
  declare export var DiagnosticRelatedInformation: {
    create(location: ILocation, message: string): IDiagnosticRelatedInformation,
    is(value: mixed): boolean,
  };

  declare export var DiagnosticSeverity: {
    Error: 1,
    Warning: 2,
    Information: 3,
    Hint: 4,
  };
  declare export type DiagnosticSeverityType = 1 | 2 | 3 | 4;

  declare export var DiagnosticTag: {
    Unnecessary: 1,
  };
  declare export type DiagnosticTagType = 1;

  declare export interface IDiagnostic {
    range: IRange;
    severity?: DiagnosticSeverityType;
    +code?: number | string;
    source?: string;
    message: string;
    tags?: DiagnosticTagType[];
    relatedInformation?: IDiagnosticRelatedInformation[];
  }
  declare export var Diagnostic: {
    create(
      range: IRange,
      severity?: DiagnosticSeverityType,
      code?: number | string,
      source?: string,
      message: string,
      tags?: DiagnosticTagType[],
      relatedInformation?: IDiagnosticRelatedInformation[],
    ): IDiagnostic,
    is(value: mixed): boolean,
  };

  declare export interface ICommand {
    title: string;
    command: string;
    arguments?: any[];
  }

  declare export var Command: {
    create(title: string, command: string, ...args: Array<any>): ICommand,
    is(value: mixed): boolean,
  };

  declare export interface ITextEdit {
    range: IRange;
    newText: string;
  }
  declare export var TextEdit: {
    replace(range: IRange, newText: string): ITextEdit,
    insert(position: IPosition, newText: string): ITextEdit,
    del(range: IRange): ITextEdit,
    is(value: mixed): boolean,
  };

  declare export interface ITextDocumentEdit {
    textDocument: IVersionedTextDocumentIdentifier;
    edits: ITextEdit[];
  }
  declare export var TextDocumentEdit: {
    create(
      textDocument: IVersionedTextDocumentIdentifier,
      edits: ITextEdit[],
    ): ITextDocumentEdit,
    is(value: mixed): boolean,
  };

  declare export type IVersionedTextDocumentIdentifier = {
    version: number,
  } & ITextDocumentIdentifier;

  declare export var VersionedTextDocumentIdentifier: {
    create(uri: string, version: number): IVersionedTextDocumentIdentifier,
    is(value: any): boolean,
  };

  declare export interface IWorkspaceEdit {
    changes?: {
      [uri: string]: Array<ITextEdit>,
    };
    documentChanges?: Array<ITextDocumentEdit>;
  }

  declare export interface ITextEditChange {
    all(): Array<ITextEdit>;
    clear(): void;
    add(edit: ITextEdit): void;
    insert(position: IPosition, newText: string): void;
    replace(range: IRange, newText: string): void;
    delete(range: IRange): void;
  }

  declare export class WorkspaceChange {
    constructor(workspaceEdit?: IWorkspaceEdit): this;
    +edit: IWorkspaceEdit;
    getTextEditChange(
      textDocument: IVersionedTextDocumentIdentifier,
    ): ITextEditChange;
    getTextEditChange(uri: string): ITextEditChange;
  }

  declare export interface ITextDocumentIdentifier {
    uri: DocumentUri;
  }
  declare export var TextDocumentIdentifier: {
    create(uri: DocumentUri): ITextDocumentIdentifier,
    is(value: any): boolean,
  };

  declare export interface ITextDocumentItem {
    uri: DocumentUri;
    languageId: string;
    version: number;
    text: string;
  }
  declare export var TextDocumentItem: {
    create(
      uri: string,
      languageId: string,
      version: number,
      text: string,
    ): ITextDocumentItem,
    is(value: any): boolean,
  };

  declare export var MarkupKind: {
    PlainText: 'plaintext',
    Markdown: 'markdown',
    is(value: mixed): boolean,
  };
  declare export type MarkupKindType = 'plaintext' | 'markdown';

  declare export interface IMarkupContent {
    kind: MarkupKindType;
    value: string;
  }
  declare export var MarkupContext: {
    is(value: mixed): boolean,
  };

  declare export var CompletionItemKind: {
    Text: 1,
    Method: 2,
    Function: 3,
    Constructor: 4,
    Field: 5,
    Variable: 6,
    Class: 7,
    Interface: 8,
    Module: 9,
    Property: 10,
    Unit: 11,
    Value: 12,
    Enum: 13,
    Keyword: 14,
    Snippet: 15,
    Color: 16,
    File: 17,
    Reference: 18,
    Folder: 19,
    EnumMember: 20,
    Constant: 21,
    Struct: 22,
    Event: 23,
    Operator: 24,
    TypeParameter: 25,
  };
  declare export type CompletionItemKindType =
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25;

  declare export var InsertTextFormat: {
    PlainText: 1,
    Snippet: 2,
  };
  declare export type InsertTextFormatType = 1 | 2;

  declare export interface ICompletionItem {
    label: string;
    kind?: CompletionItemKindType;
    detail?: string;
    documentation?: string | IMarkupContent;
    deprecated?: boolean;
    preselect?: boolean;
    sortText?: string;
    filterText?: string;
    insertText?: string;
    insertTextFormat?: InsertTextFormatType;
    textEdit?: ITextEdit;
    additionalTextEdits?: ITextEdit[];
    commitCharacters?: string[];
    command?: ICommand;
    data?: any;
  }
  declare export var CompletionItem: {
    create(label: string): ICompletionItem,
  };

  declare export type ICompletionList = {
    isIncomplete: boolean,
    items: ICompletionItem[],
  };

  declare export var CompletionList: {
    create(
      items?: Array<ICompletionItem>,
      isIncomplete?: boolean,
    ): ICompletionList,
  };

  declare export type IMarkedString =
    | string
    | {
        language: string,
        value: string,
      };

  declare export var MarkedString: {
    fromPlainText(plainText: string): string,
    is(value: mixed): boolean,
  };

  declare export type IHover = {
    contents: IMarkupContent | IMarkedString | IMarkedString[],
    range?: IRange,
  };
  declare export var Hover: {
    is(value: mixed): boolean,
  };

  declare interface IParameterInformation {
    label: string | [number, number];
    documentation?: string | IMarkupContent;
  }

  declare export var ParameterInformation: {
    create(
      label: string | [number | number],
      documentation?: string,
    ): IParameterInformation,
  };

  declare export interface ISignatureInformation {
    label: string;
    documentation?: string | IMarkupContent;
    parameters?: IParameterInformation[];
  }
  declare var SignatureInformation: {
    create(
      label: string,
      documentation?: string,
      ...parameters: Array<IParameterInformation>
    ): ISignatureInformation,
  };

  declare export interface ISignatureHelp {
    signatures: Array<ISignatureInformation>;
    activeSignature: number | null;
    activeParameter: number | null;
  }

  declare export type IDefinition = ILocation | ILocation[];
  declare export type IDefinitionLink = ILocationLink;

  declare export type IDeclaration = ILocation | ILocation[];
  declare export type IDeclarationLink = ILocationLink;

  declare export interface IReferenceContext {
    includeDeclaration: boolean;
  }

  declare export var DocumentHighlightKind: {
    Text: 1,
    Read: 2,
    Write: 3,
  };
  declare export type DocumentHighlightKindType = 1 | 2 | 3;

  declare export interface IDocumentHighlight {
    range: IRange;
    kind?: DocumentHighlightKindType;
  }
  declare export var DocumentHighlight: {
    create(range: IRange, kind?: DocumentHighlightKindType): IDocumentHighlight,
  };

  declare export var SymbolKind: {
    File: 1,
    Module: 2,
    Namespace: 3,
    Package: 4,
    Class: 5,
    Method: 6,
    Property: 7,
    Field: 8,
    Constructor: 9,
    Enum: 10,
    Interface: 11,
    Function: 12,
    Variable: 13,
    Constant: 14,
    String: 15,
    Number: 16,
    Boolean: 17,
    Array: 18,
    Object: 19,
    Key: 20,
    Null: 21,
    EnumMember: 22,
    Struct: 23,
    Event: 24,
    Operator: 25,
    TypeParameter: 26,
  };
  declare export type SymbolKindType =
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26;

  declare export interface ISymbolInformation {
    name: string;
    kind: SymbolKindType;
    deprecated?: boolean;
    location: ILocation;
    containerName?: string;
  }

  declare export var SymbolInformation: {
    create(
      name: string,
      kind: SymbolKindType,
      range: IRange,
      uri?: string,
      containerName?: string,
    ): ISymbolInformation,
  };

  declare export interface IDocumentSymbol {
    name: string;
    detail?: string;
    kind?: SymbolKindType;
    deprecated?: boolean;
    range: IRange;
    selectionRange: IRange;
    children?: IDocumentSymbol[];
  }
  declare export var DocumentSymbol: {
    create(
      name: string,
      detail: string | void,
      kind: SymbolKindType,
      range: IRange,
      selectionRange: IRange,
      children?: IDocumentSymbol[],
    ): IDocumentSymbol,
    is(value: mixed): boolean,
  };

  declare export interface DocumentSymbolParams {
    textDocument: ITextDocumentIdentifier;
  }

  declare export interface WorkspaceSymbolParams {
    query: string;
  }

  declare export type CodeActionKindType = string;
  declare export var CodeActionKind: {
    QuickFix: CodeActionKindType,
    Refactor: CodeActionKindType,
    RefactorExtract: CodeActionKindType,
    RefactorInline: CodeActionKindType,
    RefactorRewrite: CodeActionKindType,
  };

  declare export interface ICodeActionContext {
    diagnostics: IDiagnostic[];
    only?: CodeActionKindType[];
  }

  declare export var CodeActionContext: {
    create(
      diagnostics: Array<IDiagnostic>,
      only?: CodeActionKindType[],
    ): ICodeActionContext,
    is(value: mixed): boolean,
  };

  declare export interface ICodeAction {
    title: string;
    kind?: CodeActionKindType;
    diagnostics?: IDiagnostic[];
    edit?: IWorkspaceEdit;
    command?: ICommand;
  }
  declare export var CodeAction: {
    create(
      title: string,
      command: ICommand,
      kind?: CodeActionKindType,
    ): ICodeAction,
    create(
      title: string,
      edit: IWorkspaceEdit,
      kind?: CodeActionKindType,
    ): ICodeAction,
    is(value: mixed): boolean,
  };

  declare export interface ICodeLens {
    range: IRange;
    command?: ICommand;
    data?: any;
  }

  declare var CodeLens: {
    create(range: IRange, data?: any): ICodeLens,
    is(value: any): boolean,
  };

  declare export interface IFormattingOptions {
    tabSize: number;
    insertSpaces: boolean;
    trimTrailingWhitespace?: boolean;
    insertFinalNewline?: boolean;
    trimFinalNewline?: boolean;
    [key: string]: boolean | number | string | void;
  }

  declare export var FormattingOptions: {
    create(tabSize: number, insertSpaces: boolean): IFormattingOptions,
    is(value: any): boolean,
  };

  declare export interface IDocumentLink {
    range: IRange;
    target?: string;
    data?: any;
  }
  declare export class DocumentLink {
    static create(range: IRange, target?: string): DocumentLink;
    static is(value: any): boolean;
  }

  declare export interface ISelectionRange {
    range: IRange;
    parent?: ISelectionRange;
  }
  declare export var SelectionRange: {
    create(range: IRange, parent?: ISelectionRange): ISelectionRange,
    is(value: mixed): boolean,
  };

  declare export var EOL: string[];

  declare export interface ITextDocument {
    +uri: DocumentUri;
    +languageId: string;
    +version: number;
    getText(range?: IRange): string;
    positionAt(offset: number): IPosition;
    offsetAt(position: IPosition): number;
    +lineCount: number;
  }

  declare export var TextDocument: {
    create(
      uri: DocumentUri,
      languageId: string,
      version: number,
      content: string,
    ): ITextDocument,

    is(value: any): boolean,
  };

  declare export interface TextDocumentChangeEvent {
    document: ITextDocument;
  }

  declare export var TextDocumentSaveReason: {
    Manual: 1,
    AfterDelay: 2,
    FocusOut: 3,
  };
  declare export type TextDocumentSaveReasonType = 1 | 2 | 3;
  declare export interface TextDocumentWillSaveEvent {
    document: ITextDocument;
    reason: TextDocumentSaveReasonType;
  }

  declare export interface TextDocumentContentChangeEvent {
    range?: IRange;
    rangeLength?: number;
    text: string;
  }
}
